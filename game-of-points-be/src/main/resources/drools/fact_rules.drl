package rules

import io.rizvan.beans.facts.PlayerAimFact;
import io.rizvan.beans.facts.PlayerMovementFact;
import io.rizvan.beans.facts.PlayerShootingFact;
import io.rizvan.beans.facts.PlayerCollectionFact;
import io.rizvan.beans.facts.PlayerHPChangeFact;
import io.rizvan.beans.facts.GameTimeChangeFact;
import io.rizvan.beans.facts.ResourcesChangeFact;
import io.rizvan.beans.knowledge.AgentKnowledge;
import io.rizvan.beans.actors.agent.Agent;
import io.rizvan.beans.KnowledgeUpdateSignal;
import io.rizvan.beans.KnowledgeInferredSignal;
import io.rizvan.beans.GameState;
import io.rizvan.beans.actors.CompetingEntity;
import java.util.stream.Collectors;
import java.util.Comparator;
import io.rizvan.beans.Weapon;
import java.util.Optional;
import java.util.stream.Stream
import java.util.List

rule "Player Moved"
agenda-group "inference-group"
no-loop true
    when
        $moveFact : PlayerMovementFact()
        $knowledge : AgentKnowledge()
    then
        System.out.println("Player Moved ran");
        modify($knowledge){
            setPlayerPosition($moveFact.getX(), $moveFact.getY(), true)
        };
end

rule "Player Aimed"
agenda-group "inference-group"
no-loop true
    when
        $aimFact : PlayerAimFact()
        $knowledge : AgentKnowledge()
    then
        System.out.println("Player aimed ran");
        modify($knowledge) {
            setPlayerAim($aimFact.getMouseX(), $aimFact.getMouseY(), true)
        };
end

rule "Player shot"
agenda-group "inference-group"
no-loop true
    when
        $shootingFact : PlayerShootingFact()
        $knowledge : AgentKnowledge($shotCount : getShotCount())
    then
        boolean damageFelt = $shootingFact.getDamage() >= 0;
        int updatedShotCount = $shootingFact.actionSucceeded() ? $shotCount.getValue() + 1 : $shotCount.getValue();
        modify($knowledge) {
            setPlayerDamage($shootingFact.getDamage(), damageFelt),
            setShotCount(updatedShotCount, true)
        };
end

rule "Player collected resource"
agenda-group "inference-group"
no-loop true
    when
        $collectionFact : PlayerCollectionFact()
        $knowledge : AgentKnowledge()
    then
        System.out.println("Player collected ran");
        modify($knowledge) {
            setPlayerPoints($collectionFact.getTotalPoints(), true)
        };
end

rule "Resource Points Changed"
agenda-group "inference-group"
no-loop true
    when
        $resourcesChangedFact : ResourcesChangeFact()
        $knowledge : AgentKnowledge()
    then
        modify($knowledge) {
            setResourcePoints($resourcesChangedFact.getResources(), true)
        };
end

rule "Game Time Changed"
agenda-group "inference-group"
no-loop true
    when
        $timeChangeFact : GameTimeChangeFact()
        $knowledge : AgentKnowledge()
    then
       modify($knowledge) {
           setTimeLeft($timeChangeFact.getTimeLeft(), true)
       };
end

rule "Player HP changed"
agenda-group "inference-group"
no-loop true
    when
        $hpChangeFact : PlayerHPChangeFact()
        $knowledge : AgentKnowledge()
    then
        modify($knowledge) {
            setPlayerHitPoints($hpChangeFact.getHP(), true)
        };
end

rule "Knowledge Inference"
agenda-group "inference-group"
salience -100
    when
        $knowledge : AgentKnowledge()
    then
        boolean isShotCountKnown = $knowledge.getShotCount().isKnown();
        boolean isAmmoCapacityKnown = $knowledge.getPlayerAmmoCapacity().isKnown();
        boolean isPlayerDamageKnown = $knowledge.getPlayerDamage().isKnown();
        boolean isPlayerSpeedKnown = $knowledge.getPlayerSpeed().isKnown();
        boolean isPlayerReachKnown = $knowledge.getPlayerReach().isKnown();
        if (!isPlayerDamageKnown || !isPlayerSpeedKnown || !isPlayerReachKnown || !isAmmoCapacityKnown) {
            System.out.println("isShotCountKnown: " + isShotCountKnown + ", isAmmoCapacityKnown: " + isAmmoCapacityKnown + ", isPlayerDamageKnown: " + isPlayerDamageKnown + ", isPlayerSpeedKnown" + isPlayerDamageKnown + ", isPlayerReachKnown: " + isPlayerReachKnown);
            List<Weapon> weapons = $knowledge.getPossibleWeapons()
            .stream()
            .filter(wep ->
                ((wep.getAmmoCapacity() >= $knowledge.getShotCount().getValue()) &&
                (!isPlayerDamageKnown || wep.getDamage() == $knowledge.getPlayerDamage().getValue()) &&
                (!isPlayerSpeedKnown || wep.getSpeedModifier() * CompetingEntity.BASE_SPEED == $knowledge.getPlayerSpeed().getValue()) &&
                (!isPlayerReachKnown || wep.getRange() == $knowledge.getPlayerReach().getValue()))
            ).toList();

            System.out.println(weapons.size() + ", shotCount: " + $knowledge.getShotCount().getValue());

            weapons.stream().max(Comparator.comparingInt(Weapon::getAmmoCapacity))
                .ifPresent(maxCapacityWeapon -> {
                    boolean ammoIsKnown = $knowledge.getPlayerAmmoCapacity().isKnown();
                    $knowledge.setPlayerAmmoCapacity(maxCapacityWeapon.getAmmoCapacity(), ammoIsKnown);
                });

            weapons.stream().max(Comparator.comparingInt(Weapon::getDamage))
                .ifPresent(maxDamageWeapon -> {
                    boolean dmgIsKnown = $knowledge.getPlayerDamage().isKnown();
                    if (!dmgIsKnown) {
                        $knowledge.setPlayerDamage(maxDamageWeapon.getDamage(), dmgIsKnown);
                    }
                });

            weapons.stream().max(Comparator.comparingDouble(Weapon::getSpeedModifier))
               .ifPresent(maxSpeedWeapon -> {
                   boolean speedIsKnown = $knowledge.getPlayerSpeed().isKnown();
                   if (!speedIsKnown) {
                       $knowledge.setPlayerSpeed(maxSpeedWeapon.getSpeedModifier() * CompetingEntity.BASE_SPEED, speedIsKnown);
                   }
               });

            weapons.stream().max(Comparator.comparingDouble(Weapon::getRange))
               .ifPresent(maxRangeWeapon -> {
                   boolean rangeIsKnown = $knowledge.getPlayerReach().isKnown();
                   if (!rangeIsKnown) {
                       $knowledge.setPlayerReach(maxRangeWeapon.getRange(), rangeIsKnown);
                   }
               });
        }
end

