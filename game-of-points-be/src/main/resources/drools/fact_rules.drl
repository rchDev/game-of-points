package rules

import io.rizvan.beans.facts.PlayerAimFact;
import io.rizvan.beans.facts.PlayerMovementFact;
import io.rizvan.beans.facts.PlayerShootingFact;
import io.rizvan.beans.facts.PlayerCollectionFact;
import io.rizvan.beans.facts.GameTimeChangeFact;
import io.rizvan.beans.facts.ResourcesChangeFact;
import io.rizvan.beans.AgentKnowledge;
import io.rizvan.beans.actors.Agent;
import io.rizvan.beans.KnowledgeUpdateSignal;

rule "Player Moved"
    no-loop true
    when
        $moveFact : PlayerMovementFact()
        $knowledge : AgentKnowledge()
    then
    System.out.println("Player Moved ran");
        modify($knowledge){
            setPlayerX($moveFact.getX()),
            setPlayerY($moveFact.getY())
        }
        insertLogical(new KnowledgeUpdateSignal());
end

rule "Player Aimed"
    no-loop true
    when
        $aimFact : PlayerAimFact()
        $knowledge : AgentKnowledge()
    then
        System.out.println("Player aimed ran");
        modify($knowledge) {
            setMouseX($aimFact.getMouseX()),
            setMouseY($aimFact.getMouseY())
        }
        insertLogical(new KnowledgeUpdateSignal());
end

rule "Player shot"
    no-loop true
    when
        $shootingFact : PlayerShootingFact()
        $knowledge: AgentKnowledge()
    then
        modify($knowledge){
            setPlayerDamage($shootingFact.getDamage())
        }
        insertLogical(new KnowledgeUpdateSignal());
end

rule "Player collected resource"
    no-loop true
    when
        $collectionFact : PlayerCollectionFact()
        $knowledge : AgentKnowledge()
    then
        System.out.println("Player collected ran");
        modify($knowledge){
            setPlayerPoints($collectionFact.getTotalPoints())
        }
        insertLogical(new KnowledgeUpdateSignal());
end

rule "Resource Points Changed"
    no-loop true
    when
        $resourcesChangedFact : ResourcesChangeFact()
        $knowledge : AgentKnowledge()
    then
        modify($knowledge){
            setResourcePointLocations($resourcesChangedFact.getResources())
        }
        insertLogical(new KnowledgeUpdateSignal());
end

rule "Game Time Changed"
    no-loop true
    when
        $timeChangeFact : GameTimeChangeFact()
        $knowledge : AgentKnowledge()
    then
       modify($knowledge) {
           setTimeLeft($timeChangeFact.getTimeLeft())
       }
        insertLogical(new KnowledgeUpdateSignal());
end

rule "Knowledge Inference"
    when
        $knowledge : AgentKnowledge() and
        $signal : KnowledgeUpdateSignal()
    then
    System.out.println("Knowledge Inference ran");
    retract($signal);
end

